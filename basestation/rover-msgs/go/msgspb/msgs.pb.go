// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: msgs.proto

package msgspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to DataType:
	//
	//	*Message_Imu
	//	*Message_Gps
	//	*Message_Twist
	DataType      isMessage_DataType `protobuf_oneof:"data_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_msgs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetDataType() isMessage_DataType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *Message) GetImu() *IMUData {
	if x != nil {
		if x, ok := x.DataType.(*Message_Imu); ok {
			return x.Imu
		}
	}
	return nil
}

func (x *Message) GetGps() *GPSData {
	if x != nil {
		if x, ok := x.DataType.(*Message_Gps); ok {
			return x.Gps
		}
	}
	return nil
}

func (x *Message) GetTwist() *Twist {
	if x != nil {
		if x, ok := x.DataType.(*Message_Twist); ok {
			return x.Twist
		}
	}
	return nil
}

type isMessage_DataType interface {
	isMessage_DataType()
}

type Message_Imu struct {
	Imu *IMUData `protobuf:"bytes,1,opt,name=imu,proto3,oneof"`
}

type Message_Gps struct {
	Gps *GPSData `protobuf:"bytes,2,opt,name=gps,proto3,oneof"`
}

type Message_Twist struct {
	Twist *Twist `protobuf:"bytes,3,opt,name=twist,proto3,oneof"`
}

func (*Message_Imu) isMessage_DataType() {}

func (*Message_Gps) isMessage_DataType() {}

func (*Message_Twist) isMessage_DataType() {}

type Twist struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Linear        *Vector3               `protobuf:"bytes,1,opt,name=linear,proto3" json:"linear,omitempty"`   // Linear velocity
	Angular       *Vector3               `protobuf:"bytes,2,opt,name=angular,proto3" json:"angular,omitempty"` // Angular velocity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Twist) Reset() {
	*x = Twist{}
	mi := &file_msgs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Twist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Twist) ProtoMessage() {}

func (x *Twist) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Twist.ProtoReflect.Descriptor instead.
func (*Twist) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{1}
}

func (x *Twist) GetLinear() *Vector3 {
	if x != nil {
		return x.Linear
	}
	return nil
}

func (x *Twist) GetAngular() *Vector3 {
	if x != nil {
		return x.Angular
	}
	return nil
}

type GPSData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Longitude          float64                `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude           float64                `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Altitude           float64                `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	GroundSpeed        float32                `protobuf:"fixed32,4,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
	Satellites         uint32                 `protobuf:"varint,5,opt,name=satellites,proto3" json:"satellites,omitempty"`
	ModeIndicator      uint32                 `protobuf:"varint,6,opt,name=mode_indicator,json=modeIndicator,proto3" json:"mode_indicator,omitempty"`
	Separation         float32                `protobuf:"fixed32,7,opt,name=separation,proto3" json:"separation,omitempty"`
	TrueCourse         float32                `protobuf:"fixed32,8,opt,name=true_course,json=trueCourse,proto3" json:"true_course,omitempty"`
	TrueCourseMagnetic float32                `protobuf:"fixed32,9,opt,name=true_course_magnetic,json=trueCourseMagnetic,proto3" json:"true_course_magnetic,omitempty"`
	Dilution           float32                `protobuf:"fixed32,10,opt,name=dilution,proto3" json:"dilution,omitempty"`
	UtcTime            uint32                 `protobuf:"varint,11,opt,name=utc_time,json=utcTime,proto3" json:"utc_time,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GPSData) Reset() {
	*x = GPSData{}
	mi := &file_msgs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPSData) ProtoMessage() {}

func (x *GPSData) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPSData.ProtoReflect.Descriptor instead.
func (*GPSData) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{2}
}

func (x *GPSData) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GPSData) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GPSData) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GPSData) GetGroundSpeed() float32 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

func (x *GPSData) GetSatellites() uint32 {
	if x != nil {
		return x.Satellites
	}
	return 0
}

func (x *GPSData) GetModeIndicator() uint32 {
	if x != nil {
		return x.ModeIndicator
	}
	return 0
}

func (x *GPSData) GetSeparation() float32 {
	if x != nil {
		return x.Separation
	}
	return 0
}

func (x *GPSData) GetTrueCourse() float32 {
	if x != nil {
		return x.TrueCourse
	}
	return 0
}

func (x *GPSData) GetTrueCourseMagnetic() float32 {
	if x != nil {
		return x.TrueCourseMagnetic
	}
	return 0
}

func (x *GPSData) GetDilution() float32 {
	if x != nil {
		return x.Dilution
	}
	return 0
}

func (x *GPSData) GetUtcTime() uint32 {
	if x != nil {
		return x.UtcTime
	}
	return 0
}

type IMUData struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Header                       *Header                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Orientation                  *Quaternion            `protobuf:"bytes,2,opt,name=orientation,proto3" json:"orientation,omitempty"`
	OrientationCovariance        []float64              `protobuf:"fixed64,3,rep,packed,name=orientation_covariance,json=orientationCovariance,proto3" json:"orientation_covariance,omitempty"` // Use repeated for fixed-size arrays (size 9)
	AngularVelocity              *Vector3               `protobuf:"bytes,4,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"`
	AngularVelocityCovariance    []float64              `protobuf:"fixed64,5,rep,packed,name=angular_velocity_covariance,json=angularVelocityCovariance,proto3" json:"angular_velocity_covariance,omitempty"` // Use repeated for fixed-size arrays (size 9)
	LinearAcceleration           *Vector3               `protobuf:"bytes,6,opt,name=linear_acceleration,json=linearAcceleration,proto3" json:"linear_acceleration,omitempty"`
	LinearAccelerationCovariance []float64              `protobuf:"fixed64,7,rep,packed,name=linear_acceleration_covariance,json=linearAccelerationCovariance,proto3" json:"linear_acceleration_covariance,omitempty"` // Use repeated for fixed-size arrays (size 9)
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *IMUData) Reset() {
	*x = IMUData{}
	mi := &file_msgs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMUData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMUData) ProtoMessage() {}

func (x *IMUData) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMUData.ProtoReflect.Descriptor instead.
func (*IMUData) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{3}
}

func (x *IMUData) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *IMUData) GetOrientation() *Quaternion {
	if x != nil {
		return x.Orientation
	}
	return nil
}

func (x *IMUData) GetOrientationCovariance() []float64 {
	if x != nil {
		return x.OrientationCovariance
	}
	return nil
}

func (x *IMUData) GetAngularVelocity() *Vector3 {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

func (x *IMUData) GetAngularVelocityCovariance() []float64 {
	if x != nil {
		return x.AngularVelocityCovariance
	}
	return nil
}

func (x *IMUData) GetLinearAcceleration() *Vector3 {
	if x != nil {
		return x.LinearAcceleration
	}
	return nil
}

func (x *IMUData) GetLinearAccelerationCovariance() []float64 {
	if x != nil {
		return x.LinearAccelerationCovariance
	}
	return nil
}

type Quaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"` // X component
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"` // Y component
	Z             float64                `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"` // Z component
	W             float64                `protobuf:"fixed64,4,opt,name=w,proto3" json:"w,omitempty"` // W component
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_msgs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{4}
}

func (x *Quaternion) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Quaternion) GetW() float64 {
	if x != nil {
		return x.W
	}
	return 0
}

type Vector3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"` // X component
	Y             float64                `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"` // Y component
	Z             float64                `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"` // Z component
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector3) Reset() {
	*x = Vector3{}
	mi := &file_msgs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3) ProtoMessage() {}

func (x *Vector3) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3.ProtoReflect.Descriptor instead.
func (*Vector3) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{5}
}

func (x *Vector3) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seq           uint32                 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`                       // Sequence ID
	Stamp         string                 `protobuf:"bytes,2,opt,name=stamp,proto3" json:"stamp,omitempty"`                    // Timestamp in ISO 8601 format or seconds.nanoseconds (adapt as needed)
	FrameId       string                 `protobuf:"bytes,3,opt,name=frame_id,json=frameId,proto3" json:"frame_id,omitempty"` // Reference frame ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_msgs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{6}
}

func (x *Header) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Header) GetStamp() string {
	if x != nil {
		return x.Stamp
	}
	return ""
}

func (x *Header) GetFrameId() string {
	if x != nil {
		return x.FrameId
	}
	return ""
}

var File_msgs_proto protoreflect.FileDescriptor

var file_msgs_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x03, 0x69, 0x6d, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x4d, 0x55, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x03,
	0x69, 0x6d, 0x75, 0x12, 0x22, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x53, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x03, 0x67, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x77, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x77, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x74, 0x77, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x05, 0x54, 0x77,
	0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x61,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x07, 0x61, 0x6e,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x22, 0xf3, 0x02, 0x0a, 0x07, 0x47, 0x50, 0x53, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x74, 0x72, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x61, 0x67, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x07,
	0x49, 0x4d, 0x55, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x74,
	0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x61, 0x6e,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x33, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x19, 0x61, 0x6e, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x33, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x1c,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x0a,
	0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x77, 0x22, 0x33, 0x0a, 0x07, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x4b, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x42, 0x16, 0x5a, 0x14, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x6d, 0x73,
	0x67, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x73, 0x67, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_msgs_proto_rawDescOnce sync.Once
	file_msgs_proto_rawDescData []byte
)

func file_msgs_proto_rawDescGZIP() []byte {
	file_msgs_proto_rawDescOnce.Do(func() {
		file_msgs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_msgs_proto_rawDesc), len(file_msgs_proto_rawDesc)))
	})
	return file_msgs_proto_rawDescData
}

var file_msgs_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_msgs_proto_goTypes = []any{
	(*Message)(nil),    // 0: rover.Message
	(*Twist)(nil),      // 1: rover.Twist
	(*GPSData)(nil),    // 2: rover.GPSData
	(*IMUData)(nil),    // 3: rover.IMUData
	(*Quaternion)(nil), // 4: rover.Quaternion
	(*Vector3)(nil),    // 5: rover.Vector3
	(*Header)(nil),     // 6: rover.Header
}
var file_msgs_proto_depIdxs = []int32{
	3, // 0: rover.Message.imu:type_name -> rover.IMUData
	2, // 1: rover.Message.gps:type_name -> rover.GPSData
	1, // 2: rover.Message.twist:type_name -> rover.Twist
	5, // 3: rover.Twist.linear:type_name -> rover.Vector3
	5, // 4: rover.Twist.angular:type_name -> rover.Vector3
	6, // 5: rover.IMUData.header:type_name -> rover.Header
	4, // 6: rover.IMUData.orientation:type_name -> rover.Quaternion
	5, // 7: rover.IMUData.angular_velocity:type_name -> rover.Vector3
	5, // 8: rover.IMUData.linear_acceleration:type_name -> rover.Vector3
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_msgs_proto_init() }
func file_msgs_proto_init() {
	if File_msgs_proto != nil {
		return
	}
	file_msgs_proto_msgTypes[0].OneofWrappers = []any{
		(*Message_Imu)(nil),
		(*Message_Gps)(nil),
		(*Message_Twist)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_msgs_proto_rawDesc), len(file_msgs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msgs_proto_goTypes,
		DependencyIndexes: file_msgs_proto_depIdxs,
		MessageInfos:      file_msgs_proto_msgTypes,
	}.Build()
	File_msgs_proto = out.File
	file_msgs_proto_goTypes = nil
	file_msgs_proto_depIdxs = nil
}
